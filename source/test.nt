import {
  core.list {length},
  core.text {split},
  noa.move.check {check},
  noa.move.make-noa-kit {make-default-noa-kit},
  this.request {request},
  this.request.gen {request-gen},
  this.request.parse.v1-1 {request-parser},
  this.request.show.v1-1 {show-request},
  this.response {response},
  this.response.gen {response-gen},
  this.response.parse.v1-1 {response-parser},
  this.response.show.v1-1 {show-response},
  zonk.move.make-zonk-kit {make-zonk-kit},
}

define main(): unit {
  pin k = make-default-noa-kit();
  check(
    k,
    "∀ (r: request). show(parse(show(r))) == show(r)",
    request-gen,
    function (!r: request) {
      pin req-text-1 = show-request(!r);
      pin k = make-zonk-kit(*req-text-1);
      match request-parser(k) {
      | Right(req) =>
        pin req-text-2 = show-request(req);
        eq-text(req-text-1, req-text-2)
      | Left(_) =>
        False
      }
    },
  );
  check(
    k,
    "∀ (r: request). `show(r)` contains at least one empty line",
    request-gen,
    function (!r: request) {
      pin req-text = show-request(!r);
      pin segments = split(req-text, "\r\n\r\n");
      ge-int(length(segments), 2)
    },
  );
  check(
    k,
    "∀ (r: response). show(parse(show(r))) == show(r)",
    response-gen,
    function (!r: response) {
      pin req-text-1 = show-response(!r);
      pin k = make-zonk-kit(*req-text-1);
      match response-parser(k) {
      | Right(req) =>
        pin req-text-2 = show-response(req);
        eq-text(req-text-1, req-text-2)
      | Left(_) =>
        False
      }
    },
  );
  check(
    k,
    "∀ (r: response). `show(r)` contains at least one empty line",
    response-gen,
    function (!r: response) {
      pin req-text = show-response(!r);
      pin segments = split(req-text, "\r\n\r\n");
      ge-int(length(segments), 2)
    },
  )
}

define zen(): unit {
  main()
}
