import {
  core.text {split},
  noa.suite {noa},
  this.request {request},
  this.request.gen {requests},
  this.request.parse.v1-1 {request-parser},
  this.request.show.v1-1 {show-request},
  this.response {response},
  this.response.gen {responses},
  this.response.parse.v1-1 {response-parser},
  this.response.show.v1-1 {show-response},
  zonk.parser {run},
  zonk.state {new-state},
}

define main(): unit {
  noa::check(
    "∀ (r: request). show(parse(show(r))) == show(r)",
    requests,
    function (!r: request) {
      pin req-text-1 = show-request(!r) in
      pin st = new-state(*req-text-1) in
      match run(request-parser(), st) {
      | Right(req) =>
        pin req-text-2 = show-request(req) in
        eq-text(req-text-1, req-text-2)
      | Left(_) =>
        False
      };
    },
  );
  noa::check(
    "∀ (r: request). `show(r)` contains at least one empty line",
    requests,
    function (!r: request) {
      pin req-text = show-request(!r) in
      pin segments = split(req-text, "\r\n\r\n") in
      ge-int(length(segments), 2)
    },
  );
  noa::check(
    "∀ (r: response). show(parse(show(r))) == show(r)",
    responses,
    function (!r: response) {
      pin req-text-1 = show-response(!r) in
      pin st = new-state(*req-text-1) in
      match run(response-parser(), st) {
      | Right(req) =>
        pin req-text-2 = show-response(req) in
        eq-text(req-text-1, req-text-2)
      | Left(_) =>
        False
      };
    },
  );
  noa::check(
    "∀ (r: response). `show(r)` contains at least one empty line",
    responses,
    function (!r: response) {
      pin req-text = show-response(!r) in
      pin segments = split(req-text, "\r\n\r\n") in
      ge-int(length(segments), 2)
    },
  );
}

define zen(): unit {
  main()
}
