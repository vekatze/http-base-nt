import {
  core.int.parse {parse-int},
  this.entity.header.parse {header-parser},
  this.entity.private.parse {_http-line-break, _is-status-code-number, _read-all, _skip-space, _symbol},
  this.entity.response {Response, response},
  zonk.parser {fail, parser, return, take-while, zonk},
  zonk.tag {Label},
}

define _status-code(): parser(int) {
  with zonk {
    bind status-code-text = take-while(_is-status-code-number) in
    let status-code-or-none on status-code-text = parse-int(status-code-text) in
    let _ = status-code-text in
    match status-code-or-none {
    | Right(v) =>
      return(v)
    | Left(_) =>
      fail([Label("status code")])
    }
  }
}

define response-parser(): parser(response) {
  with zonk {
    bind protocol-version = _symbol() in
    bind _ = _skip-space in
    bind status-code = _status-code() in
    bind _ = _skip-space in
    // ignore the reason phrase
    bind reason-phrase = _symbol() in
    let _ = reason-phrase in
    bind _ = _http-line-break() in
    bind fields = header-parser() in
    bind _ = _http-line-break() in
    bind body = _read-all() in
    return(
      Response of {
        protocol-version,
        status-code,
        fields,
        body,
      },
    )
  }
}
