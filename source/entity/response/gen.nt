import {
  core.random {random-in-range},
  noa.gen {Gen, gen},
  noa.gen.pairs {pairs},
  this.entity.header {header},
  this.entity.header.gen {headers},
  this.entity.private.gen {Config, adjusted-texts},
  this.entity.response {Response, response},
  this.entity.response.show,
}

constant _field-body-pair: gen(pair(header, text)) {
  let rune-blacklist = [` `, `\u{8}`, `\u{9}`, `\u{a}`, `\u{b}`, `\u{c}`, `\u{d}`] in
  let c = Config of {blacklist = rune-blacklist, min-length = 1} in
  let text-gen = adjusted-texts(c) in
  pairs(headers, text-gen)
}

constant responses: gen(response) {
  let rune-blacklist = [` `, `\u{8}`, `\u{9}`, `\u{a}`, `\u{b}`, `\u{c}`, `\u{d}`] in
  let c = Config of {blacklist = rune-blacklist, min-length = 1} in
  let !text-gen = adjusted-texts(c) in
  Gen of {
    generate = {
      function (size) {
        let protocol-version = *"HTTP/1.1" in
        let status-code = random-in-range(100, 999) in
        let fields = headers::generate(size) in
        let body = !text-gen::generate(size) in
        Response of {protocol-version, status-code, fields, body}
      }
    },
    shrink = {
      function (req) {
        let Response of {protocol-version, status-code, fields, body} = req in
        let cands = _field-body-pair::shrink(Pair(fields, body)) in
        for-each(cands, function (cand) {
          let Pair(fields, body) = cand in
          Response of {protocol-version, status-code, fields, body}
        })
      }
    },
    viewer = this.entity.response.show.as-show,
  }
}
