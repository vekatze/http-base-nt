import {
  core.list {for-each},
  core.random {random-in-range-int},
  noa.move.gen.pair {pair-gen},
  noa.rule.gen {Gen, gen},
  this.header {header},
  this.header.gen {header-gen},
  this.private.gen {_Config, _adjusted-text-gen},
  this.response {Response, response},
  this.response.show.v1-1,
}

inline _field-body-pair: gen(pair(header, text)) {
  let rune-blacklist = [` `, `\u{8}`, `\u{9}`, `\u{a}`, `\u{b}`, `\u{c}`, `\u{d}`] in
  let c = _Config of {blacklist = rune-blacklist, min-length = 1} in
  let text-gen = _adjusted-text-gen(c) in
  pair-gen(header-gen, text-gen)
}

inline response-gen: gen(response) {
  let rune-blacklist = [` `, `\u{8}`, `\u{9}`, `\u{a}`, `\u{b}`, `\u{c}`, `\u{d}`] in
  let c = _Config of {blacklist = rune-blacklist, min-length = 1} in
  let !text-gen = _adjusted-text-gen(c) in
  let Gen of {generate = generate-header} = header-gen in
  let Gen of {generate = generate-text} = !text-gen in
  let Gen of {shrink = shrink-pair} = _field-body-pair in
  Gen of {
    generate = {
      function (size) {
        let status-code = random-in-range-int(100, 999) in
        let fields = generate-header(size) in
        let body = generate-text(size) in
        Response of {status-code, fields, body}
      }
    },
    shrink = {
      function (req) {
        let Response of {status-code, fields, body} = req in
        let cands = shrink-pair(Pair(fields, body)) in
        for-each(cands, function (cand) {
          let Pair(fields, body) = cand in
          Response of {status-code, fields, body}
        })
      }
    },
    viewer = this.response.show.v1-1.as-show,
  }
}
