import {
  core.list {for-each},
  noa.move.gen.pair {pair-gen},
  noa.rule.gen {Gen, gen},
  this.header {header},
  this.header.gen {header-gen},
  this.private.gen {_Config, _adjusted-text-gen},
  this.request {Request, request},
  this.request-method {request-method},
  this.request-method.gen {request-method-gen},
  this.request.show.v1-1,
}

inline _tuple-requests: gen(pair(request-method, pair(text, pair(header, text)))) {
  let rune-blacklist = [` `, `\u{8}`, `\u{9}`, `\u{a}`, `\u{b}`, `\u{c}`, `\u{d}`];
  let c = _Config of {blacklist := rune-blacklist, min-length := 1};
  let !text-gen = _adjusted-text-gen(c);
  pair-gen(request-method-gen, pair-gen(!text-gen, pair-gen(header-gen, !text-gen)))
}

inline request-gen: gen(request) {
  let rune-blacklist = [` `, `\u{8}`, `\u{9}`, `\u{a}`, `\u{b}`, `\u{c}`, `\u{d}`];
  let c = _Config of {blacklist := rune-blacklist, min-length := 1};
  let !text-gen = _adjusted-text-gen(c);
  let Gen of {generate} = request-method-gen;
  let Gen of {generate := !generate-text} = !text-gen;
  let Gen of {generate := !generate-header} = header-gen;
  let Gen of {shrink := !shrink-tuple} = _tuple-requests;
  Gen of {
    generate := {
      function (size) {
        let method = generate(size);
        let path = !generate-text(size);
        let fields = !generate-header(size);
        let body = !generate-text(size);
        Request of {method, path, fields, body}
      }
    },
    shrink := {
      function (req) {
        let Request of {method, path, fields, body} = req;
        let tup = Pair(method, Pair(path, Pair(fields, body)));
        let cands = !shrink-tuple(tup);
        for-each(cands, function (cand) {
          let Pair(method, Pair(path, Pair(fields, body))) = cand;
          Request of {method, path, fields, body}
        })
      }
    },
    viewer := this.request.show.v1-1.as-show,
  }
}
